<style type="text/css">
    [data-validation-message] {
        display: none;
        color: red;
        font-weight: bold;
    }

        [data-validation-message].message-visible {
            display: block;
        }

    .blueborder {
        border-color: blue;
    }

        .blueborder.invalid {
            border-color: red;
        }

    /* Style the input container */
    .input-container {
        display: flex;
        width: 100%;
        margin-bottom: 15px;
    }
</style>

<form action="" method="post" id="idFrmEditRJ">
    <table class="table">
        <tr>
            <td width="50%;" style="border:none;">
                <input type="text" name="schedule_date" autocomplete="off" class="form-control blueborder" data-validate="required" id="idInpTgl" placeholder="Tgl. Rencana Jadwal*">
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Tgl. Rencana Jadwal Harus Diisi.
                </small>
            </td>
            <td style="border:none;">
                <select class="form-control blueborder" data-validate="required" name="time" id="idTime">
                    <option value="">Jam *</option>
                    <option value="08.00">08.00</option>
                    <option value="09.00">09.00</option>
                    <option value="10.00">10.00</option>
                    <option value="11.00">11.00</option>
                    <option value="12.00">12.00</option>
                    <option value="13.00">13.00</option>
                    <option value="14.00">14.00</option>
                    <option value="15.00">15.00</option>
                </select>
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Jam Harus Diisi.
                </small>
            </td>
        </tr>
        <tr>
            <td style="border:none;">
                <select class="form-control blueborder" name="ro" id="idRo">
                    <option value="">RO</option>
                    <option value="1">Irfan</option>
                    <option value="2">Maulana</option>
                </select>
            </td>
            <td style="border:none;">
                <select class="form-control blueborder" name="tro" id="idTro">
                    <option value="">TRO</option>
                    <option value="1">Titi</option>
                    <option value="2">Jaidai</option>
                </select>
            </td>
        </tr>
        <tr>
            <td style="border:none;">
                <select class="form-control blueborder" data-validate="required" name="schedule_type_id" id="idJadwal">
                    <option value="">Jenis Jadwal *</option>
                    @*<option value="8">Interview</option>
                        <option value="9">Ttd Kontrak</option>*@
                </select>
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Jenis Jadwal Harus Diisi.
                </small>
            </td>
            <td style="border:none;">
                <input type="text" name="location" class="form-control blueborder" id="idInpLocation" placeholder="Lokasi">
            </td>
        </tr>
        <tr>
            <td colspan="2" style="border:none;">
                <label>Catatan</label>
                <textarea class="form-control blueborder" id="txtarea" name="notes" rows="3" placeholder="Catatan"></textarea>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="border:none;">
                <input type="checkbox" name="is_automatic_mail" id="idAutomatic" class="blueborder" value=true> <label>Kirim Undangan Otomatis</label>
            </td>
        </tr>
        <tr>
            <td style="border:none;">
                <div class="input-container">
                    <input type="text" name="sent_date" autocomplete="off" class="form-control blueborder" disabled style="border-top-right-radius:0px; border-bottom-right-radius:0px; border-right:none;" id="idSent" placeholder="Tgl. Dikirim">
                    <span class="input-group-addon blueborder" style="background-color: white; padding-right:25px;"><i class="glyphicon glyphicon-calendar" style="font-size: 18px; color:#000080;"></i></span>
                </div>
            </td>
        </tr>
        <tr>
            <td style="border-bottom:2px solid blue; border-top:none;" colspan="2">
                <label>Pelamar</label>
            </td>
        </tr>
        <tr>
            <td>
                <label id="idDataPelamar"></label>
                <input type="hidden" name="biodata_id" id="idBiodata" />
                <input type="hidden" name="id" id="idget" />
            </td>
        </tr>
        <tr>
            <td colspan="2" align="right" style="border:none;">
                <button type="button" class="btn orenwoy" id="idBtnCancelRJ">&nbsp;Batal&nbsp;</button>
                <button type="submit" class="btn biruwoy" id="idBtnEditRJ">Simpan & Kirim</button>
            </td>
        </tr>
    </table>
</form>

<script>

    $(document).ready(function () {

        $("#idInpTgl").datepicker({ //datepicker
            minDate: 0,
            dateFormat: "yy-mm-dd"
        });

        $("#idSent").datepicker({ //datepicker
            minDate: 0,
            dateFormat: "yy-mm-dd"
        });

        var vCheck = '';

        $.ajax({

            url: '/RencanaJadwal/Check',
            method: 'Get',
            success: function (mdl) {
                debugger;
                $.each(mdl, function (i, d) { //menjahit data ke dalam tabel
                    vCheck = vCheck +
                    '<br />' + '&nbsp;' + '&nbsp;' + '&nbsp;' + '<input class="ads_Checkbox" name="bio_id" type="checkbox" value="' + d.id + '" />' + ' &nbsp;' + d.fullname;
                });
                $('#idDataPelamar').empty();
                $('#idDataPelamar').append(vCheck); //memasukan data yg sudah di jahit ke dalam body
            }
        });


        var vSelect = '';
        $.ajax({
            url: '/RencanaJadwal/Select',
            method: 'Get',
            success: function (mdl) {
                debugger;
                $.each(mdl, function (i, d) { //menjahit data ke dalam tabel
                    vSelect = vSelect +
                        '<option value="' + d.id + '">' +
                            d.name +
                            '</option>';
                });
                $('#idJadwal').append(vSelect); //memasukan data yg sudah di jahit ke dalam body
                masukin();
            }
        });


        var cks = '';
        $.ajax({
            url: '/RencanaJadwal/AmbilData2',
            data: { ID: $('#idget').val() },
            method: 'Get',
            success: function (mdl) {
                debugger;
                $.each(mdl, function (i, d) { //menjahit data ke dalam tabel
                    cks = d.biodata_id;
                    $(":checkbox[value=" + cks + "]").prop("checked", "true");
                });
                debugger;
            }
        });

        validasi();
    });

    function masukin() {
        $.ajax({
            url: '/RencanaJadwal/AmbilData',
            data: { ID: $('#idget').val() },
            method: 'Get',
            success: function (mdl) {

                function convert(date) {
                    // var date = new Date(str),
                    mnth = ("0" + (date.getMonth() + 1)).slice(-2);
                    day = ("0" + date.getDate()).slice(-2);
                    return [date.getFullYear(), mnth, day].join("-");
                }
                if (mdl.sent_date != null) {
                    var sentDate = convert(new Date(mdl.sent_date.substr(6, 13) - 0));
                }
                var testDate = convert(new Date(mdl.schedule_date.substr(6, 13) - 0));
                var text = mdl.notes.trim();

                debugger;
                $('#idInpTgl').val(testDate);
                $('#idTime').val(mdl.time).selected;
                $('#idRo').val(mdl.ro).selected;
                $('#idTro').val(mdl.tro).selected;
                $('#idJadwal').val(mdl.schedule_type_id).selected;
                $('#idInpLocation').val(mdl.location);
                $('#txtarea').val(text);
                var cek = mdl.is_automatic_mail;
                $('#idAutomatic').attr('checked', cek);

                if (cek == true) {
                    $('#idSent').val(sentDate);
                    document.getElementById("idSent").disabled = false;
                    $('#idBtnEditRJ').text("Simpan");
                }
                else{
                    $('#idSent').val(sentDate);
                }
            }
        });
    }

    $('#idAutomatic').click(function () {
        debugger;
        var checkbox = document.querySelector('input[name="is_automatic_mail"]:checked');
        if (!checkbox) {
            debugger;
            document.getElementById("idSent").disabled = true;
            $('#idSent').val('');
            $('#idBtnEditRJ').text("Simpan & Kirim");
        } else {
            document.getElementById("idSent").disabled = false;
            $('#idBtnEditRJ').text("Simpan");
        }
    });

    $('#idBtnCancelRJ').click(function () {
        $('#idMdlEditRJ').modal('hide');
        //location.reload();
    });

    function editrencana() {

        var checkbox = document.querySelector('input[name="bio_id"]:checked');
        if (!checkbox) {
            debugger;
            alert('Pilih Minimal 1 Role!');
            event.preventDefault();
        } else {
            debugger;
            var sel = $('input[name="bio_id"]:checked').map(function (_, el) {
                return $(el).val();
            }).get();
            $('#idBiodata').val(sel);
            debugger;

            debugger;
            var vDatarencana = $('#idFrmEditRJ').serialize();
            $.ajax({
                url: '/RencanaJadwal/EditSimpan',
                data: vDatarencana,
                method: 'Post',
                success: function (mdl) {
                    if (mdl.EditSimpan == "Berhasil") {
                        debugger;
                        alert("Data berhasil diEdit");
                        //$('.modal').modal('hide');
                        //$.modal.close();
                        $('#idMdlEditRJ').close;
                        //location.reload();

                    }
                    else {
                        debugger;
                        alert("Data gagal diEdit");
                    }
                }
            });
        }
    }
</script>

<script>
    function validasi() {
        // (1) Defining our validator-functions
        //     for later use. They return
        //     "true", if the validation passes.
        const validators = {
            // Checks the field for emptiness.
            required: element => element.value.length > 0,

            // Checks if there are no numbers
            // in the field.
            noNumbers: element => !element.value.match(/[0-9]/g),

            // Checks if the value is shorter
            // than 10 characters.
            maxLength: element => element.value.length <= 10,

            // Checks if the checkbox is checked.
            mustBeChecked: element => element.checked
        };

        // (2) Check the contents of an input,
        //     get all validators, and mark
        //     the field in case of invalidity.
        function validateElement(element) {
            resetValidation(element);

            // Store all validators from the
            // data-validate-attribute into
            // an array.
            const rules = element.dataset.validate.split(" ");

            // For every validator on the
            // field...
            rules.forEach(rule => {
                // ...find the corresponding
                // validator-function from our
                // object from #1 and call it
                // with the element as parameter.
                if (validators[rule](element)) {
                    // If the function returns true, all is fine.
                    debugger;
                    return;
                } else {
                    // If it returns false, the
                    // validation failed.
                    // In that case, the
                    // markElementInvalid-function
                    // takes care of showing the
                    // error-message.
                    markElementInvalid(element, rule);
                }
            });
        }

        // (3) Adds classes to an element,
        //     so it appears invalid. Also
        //     it picks the correct feedback-
        //     message and sets it visible.
        function markElementInvalid(element, validatorName) {
            element.classList.add("invalid");
            element.setAttribute("aria-invalid", true);
            const feedbackMessage = element.parentNode.querySelector(
              `[data-validation-message=${validatorName}]`
            );
            feedbackMessage.classList.add("message-visible");
            feedbackMessage.setAttribute("aria-hidden", false);
        }

        // (4) Removes all traces of
        //     validation from an element,
        //     like the error-messages and
        //     the styling.
        //     (Pretty much the opposite of #3)
        function resetValidation(element) {
            element.classList.remove("invalid");
            element.setAttribute("aria-invalid", false);
            element.parentNode
              .querySelectorAll("[data-validation-message]")
              .forEach(e => {
                  e.classList.remove("message-visible");
                  e.setAttribute("aria-hidden", true);
              });
        }

        // (5) Store the form and its
        //     inputs in variables.
        const form = document.getElementById("idFrmEditRJ");
        const formElements = Array.from(form.elements);

        // (6) Every input gets an
        //     event-listener attached.
        formElements.forEach(formElement => {
            // Do nothing if the element has
            // no data-validate-attribute.
            if (!formElement.dataset) return;
            if (!formElement.dataset.validate) return;

            // Attach the blur-event-listener
            // to the element.
            formElement.addEventListener("", () => {
                // This means, validateElement will
                // be called everytime the element
                // loses focus.
                validateElement(formElement);
            });
        });

        // (7) We're doing what we did at #3,
        //     only on form-submit, and for
        //     every field.
        form.addEventListener("submit", event => {
            // Let's assume, everything is fine.
            let formIsValid = true;
            form.classList.remove("invalid");

            // We'll check every field in the form.
            // (same as #3)
            formElements.forEach(formElement => {
                if (!formElement.dataset) return;
                if (!formElement.dataset.validate) return;
                validateElement(formElement);
            });

            // If there are any "invalid"-classes
            // after we checked all fields, the form
            // is invalid...
            formIsValid = form.querySelectorAll(".invalid").length === 0;

            // ...and will not be submitted.
            if (formIsValid === false) {
                form.classList.add("invalid");
                event.preventDefault();
            } else {
                debugger;
                var checkbox = document.querySelector('input[name="bio_id"]:checked');
                if (!checkbox) {
                    debugger;
                    alert('Pilih Minimal 1 Pelamar!');
                    event.preventDefault();
                } else {
                    debugger;
                    editrencana();
                }
            }
        });
    }
</script>